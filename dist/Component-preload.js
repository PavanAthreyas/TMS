/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "TMS/Component-preload",
	"modules": {
		"TMS/localservice/loginhandler.js": "sap.ui.define([], function() {\n\t\"use strict\";\n\n\treturn {\n\n\t\tsetModelReferences: function(oAppStateModel, oLoginModel) {\n\t\t\tthis.oAppStateModel = oAppStateModel;\n\t\t\tthis.oLoginModel = oLoginModel;\n\t\t},\n\n\t\tsetCurrentUserDetails: function(oExistingUser) {\n\t\t\tthis.oAppStateModel.setProperty(\"/loggedinuser\", oExistingUser);\n\t\t},\n\n\t\tgetCurrentUserDetails: function() {\n\t\t\treturn this.oAppStateModel.getProperty(\"/loggedinuser\");\n\t\t},\n\n\t\tgetUserById: function(sUserId) {\n\t\t\tvar aUsers = this.oLoginModel.getProperty(\"/\");\n\n\t\t\tfunction findUsers(users) {\n\t\t\t\treturn users.id === sUserId;\n\t\t\t}\n\t\t\treturn aUsers.find(findUsers);\n\t\t},\n\n\t\tauthenticateUser: function(sUserName, sPassword) {\n\n\t\t\tvar aUsers = this.oLoginModel.getProperty(\"/\");\n\n\t\t\tfunction findUsers(users) {\n\t\t\t\treturn users.username === sUserName;\n\t\t\t}\n\t\t\tvar oExistingUser = aUsers.find(findUsers);\n\t\t\tif (oExistingUser) {\n\t\t\t\tif (sUserName === oExistingUser.username && sPassword === oExistingUser.password) {\n\t\t\t\t\tthis.setCurrentUserDetails(oExistingUser);\n\t\t\t\t\treturn oExistingUser;\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t\"errmsg\": \"Please Check your Credentials\"\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\t\"errmsg\": \"User Doesn Not Exits. Please Register\"\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\n\t\tregisterUser: function(oNewUser) {\n\t\t\tvar aUsers = this.oLoginModel.getProperty(\"/\");\n\t\t\toNewUser.id = \"0\" + aUsers.length + 1;\n\t\t\taUsers.push(oNewUser);\n\t\t\treturn \"New user has been successfully added. Please login to TMS \";\n\t\t}\n\n\t};\n\n});",
		"TMS/localservice/tmshandler.js": "sap.ui.define([], function() {\n\t\"use strict\";\n\n\treturn {\n\n\t\tsetModelReferences: function(oAppStateModel, oMainModel) {\n\t\t\tthis.oAppStateModel = oAppStateModel;\n\t\t\tthis.oMainModel = oMainModel;\n\t\t},\n\n\t\tregisterProject: function(oTempProject) {\n\t\t\tvar aProjectsList = this.oMainModel.getProperty(\"/ProjectCollection\");\n\t\t\toTempProject.id = \"0\" + aProjectsList.length + 1;\n\t\t\taProjectsList.push(oTempProject);\n\t\t\tthis.oMainModel.refresh();\n\t\t},\n\n\t\tremoveProject: function(sPath) {\n\t\t\tvar aProjectsList = this.oMainModel.getProperty(\"/ProjectCollection\");\n\t\t\taProjectsList.splice(sPath.slice(-1), 1);\n\t\t\tthis.oMainModel.refresh();\n\t\t},\n\n\t\tgetProjectById: function(sID) {\n\t\t\tvar aProjectsList = this.oMainModel.getProperty(\"/ProjectCollection\");\n\n\t\t\tfunction findProject(projects) {\n\t\t\t\treturn projects.id === sID;\n\t\t\t}\n\t\t\treturn aProjectsList.find(findProject);\n\t\t},\n\n\t\tsetProjectScope: function(sCurrentProjectScope) {\n\t\t\tthis.oAppStateModel.setProperty(\"/currentproject\", sCurrentProjectScope);\n\t\t},\n\n\t\taddTaskToStatusList: function(sStatusId, oTempTask) {\n\t\t\tvar aStatusList = this.oAppStateModel.getProperty(\"/currentproject\").statuslist;\n\t\t\tvar aTasks = this.oMainModel.getProperty(\"/TasksCollection\");\n\n\t\t\tfunction findStatusList(oList) {\n\t\t\t\treturn oList.id === sStatusId;\n\t\t\t}\n\t\t\tvar iIndex = aStatusList.findIndex(findStatusList);\n\t\t\toTempTask.id = \"T\" + aTasks.length;\n\t\t\taStatusList[iIndex].tasklist.push(oTempTask);\n\t\t\taTasks.push(oTempTask);\n\t\t\tthis.oMainModel.refresh();\n\t\t\tthis.oAppStateModel.refresh();\n\t\t},\n\n\t\tsetTaskScopeById: function(sTaskId) {\n\t\t\tvar oCurrentProject = this.oAppStateModel.getProperty(\"/currentproject\");\n\t\t\tvar aStatusList = oCurrentProject.statuslist;\n\t\t\tvar matches = [];\n\t\t\tvar iSIndex, iTindex;\n\t\t\taStatusList.forEach(function(status, iStatusIndex) {\n\t\t\t\tmatches = matches.concat(status.tasklist.filter(function(task, iTaskIndex) {\n\t\t\t\t\tif (task.id === sTaskId) {\n\t\t\t\t\t\tiSIndex = iStatusIndex;\n\t\t\t\t\t\tiTindex = iTaskIndex;\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t});\n\t\t\tvar oCurrentTask = aStatusList[iSIndex].tasklist[iTindex];\n\t\t\tthis.oAppStateModel.setProperty(\"/taskscope\", oCurrentTask);\n\t\t\tthis.oAppStateModel.refresh();\n\t\t\treturn true;\n\t\t},\n\n\t\tremoveTaskonID: function(sTaskId, sDragged) {\n\t\t\tvar oCurrentProject = this.oAppStateModel.getProperty(\"/currentproject\");\n\t\t\tvar aStatusList = oCurrentProject.statuslist;\n\t\t\tvar matches = [];\n\t\t\tvar iSIndex, iTindex;\n\t\t\taStatusList.forEach(function(status, iStatusIndex) {\n\t\t\t\tmatches = matches.concat(status.tasklist.filter(function(task, iTaskIndex) {\n\t\t\t\t\tif (task.id === sTaskId) {\n\t\t\t\t\t\tiSIndex = iStatusIndex;\n\t\t\t\t\t\tiTindex = iTaskIndex;\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t});\n\n\t\t\taStatusList[iSIndex].tasklist.splice(iTindex, 1);\n\t\t\tthis.oAppStateModel.refresh();\n\t\t\tif (sDragged) {\n\t\t\t\tthis.removeTaksFromTaskCollection(sTaskId);\n\t\t\t}\n\t\t},\n\n\t\tremoveTaksFromTaskCollection: function(sTaskId) {\n\t\t\tvar aTasks = this.oMainModel.getProperty(\"/TasksCollection\");\n\n\t\t\tfunction findTask(oList) {\n\t\t\t\treturn oList.id === sTaskId;\n\t\t\t}\n\t\t\tvar iIndex = aTasks.findIndex(findTask);\n\t\t\taTasks.splice(iIndex, 1);\n\t\t\tthis.oMainModel.refresh();\n\t\t},\n\n\t\taddStatusList: function(sStatusText) {\n\t\t\tvar oCurrentProject = this.oAppStateModel.getProperty(\"/currentproject\");\n\t\t\tvar aStatusList = oCurrentProject.statuslist;\n\t\t\tvar oNewStatus = {\n\t\t\t\tid: \"S\" + aStatusList.length,\n\t\t\t\ttitle: sStatusText,\n\t\t\t\ttasklist: []\n\t\t\t};\n\t\t\taStatusList.push(oNewStatus);\n\t\t\tthis.oAppStateModel.refresh();\n\t\t},\n\n\t\tremoveStatusList: function(sStatusId) {\n\t\t\tvar oCurrentProject = this.oAppStateModel.getProperty(\"/currentproject\");\n\t\t\tvar aStatusList = oCurrentProject.statuslist;\n\n\t\t\tfunction findStatusList(oList) {\n\t\t\t\treturn oList.id === sStatusId;\n\t\t\t}\n\t\t\tvar iIndex = aStatusList.findIndex(findStatusList);\n\t\t\taStatusList.splice(iIndex, 1);\n\t\t\tthis.oAppStateModel.refresh();\n\t\t},\n\n\t\tgetPrioritesbyID: function(sPriorityId) {\n\t\t\tvar aPriorites = this.oMainModel.getProperty(\"/PrioritiesCollection\");\n\t\t\tvar aList = [];\n\n\t\t\tif (sPriorityId === \"PR01\") {\n\t\t\t\taList.push(aPriorites[0], aPriorites[1], aPriorites[2]);\n\t\t\t} else if (sPriorityId === \"PR02\") {\n\t\t\t\taList.push(aPriorites[1], aPriorites[2]);\n\t\t\t} else if (sPriorityId === \"PR03\") {\n\t\t\t\taList.push(aPriorites[2]);\n\t\t\t}\n\n\t\t\treturn aList;\n\t\t},\n\n\t\tgetStatusListIndexByTaskId: function(sTaskId) {\n\t\t\tvar oCurrentProject = this.oAppStateModel.getProperty(\"/currentproject\");\n\t\t\tvar aStatusList = oCurrentProject.statuslist;\n\n\t\t\tfunction findStatusList(oList) {\n\t\t\t\tfor (var iCount = 0; iCount < oList.tasklist.length; iCount++) {\n\t\t\t\t\tif (oList.tasklist[iCount].id === sTaskId) {\n\t\t\t\t\t\treturn oList.id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn aStatusList.findIndex(findStatusList);\n\t\t},\n\n\t\tgetTypesbyID: function(sTypeId) {\n\t\t\tvar aTypes = this.oMainModel.getProperty(\"/TypesCollection\");\n\n\t\t\tfunction findTypes(oList) {\n\t\t\t\treturn oList.id === sTypeId;\n\t\t\t}\n\t\t\treturn aTypes.find(findTypes);\n\t\t},\n\n\t\tupdateItemDragged: function(sDragElementContext, sDropContextTaskId) {\n\t\t\tvar oCurrentProject = this.oAppStateModel.getProperty(\"/currentproject\");\n\t\t\tvar aStatusList = oCurrentProject.statuslist;\n\t\t\tvar oItem = this.oAppStateModel.getProperty(sDragElementContext);\n\t\t\tvar iIndex = this.getStatusListIndexByTaskId(sDropContextTaskId);\n\t\t\tthis.removeTaskonID(oItem.id);\n\t\t\taStatusList[iIndex].tasklist.push(oItem);\n\t\t\tthis.oAppStateModel.refresh();\n\t\t}\n\t};\n\n});",
		"TMS/localservice/formatter.js": "sap.ui.define(['TMS/localservice/loginhandler'], function(LoginHandler) {\n\t\"use strict\";\n\n\treturn {\n\n\t\tsetPriorityText: function(aPrioList, sLabel) {\n\t\t\tvar sString = \"\";\n\n\t\t\tif (!sLabel) {\n\t\t\t\tsString = \"Priority: \";\n\t\t\t}\n\t\t\tif (aPrioList.length === 3) {\n\t\t\t\treturn sString + \"High\";\n\t\t\t}\n\t\t\tif (aPrioList.length === 2) {\n\t\t\t\treturn sString + \"Medium\";\n\t\t\t}\n\t\t\tif (aPrioList.length === 1) {\n\t\t\t\treturn sString + \"Low\";\n\t\t\t} else {\n\t\t\t\treturn \"No Priority\";\n\t\t\t}\n\t\t},\n\n\t\tsetUserName: function(sId) {\n\t\t\tvar oUserDetails = LoginHandler.getUserById(sId);\n\t\t\tif (oUserDetails) {\n\t\t\t\treturn oUserDetails.firstname + \" \" + oUserDetails.lastname;\n\t\t\t} else {\n\t\t\t\treturn sId;\n\t\t\t}\n\t\t}\n\t};\n\n});",
		"TMS/controller/storyboard.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"TMS/localservice/loginhandler\",\n\t\"TMS/localservice/tmshandler\",\n\t\"sap/m/MessageToast\",\n\t\"sap/ui/model/Filter\",\n\t\"TMS/localservice/formatter\",\n\t\"sap/ui/thirdparty/jqueryui/jquery-ui-core\",\n\t\"sap/ui/thirdparty/jqueryui/jquery-ui-widget\",\n\t\"sap/ui/thirdparty/jqueryui/jquery-ui-mouse\",\n\t\"sap/ui/thirdparty/jqueryui/jquery-ui-sortable\",\n\t\"sap/ui/thirdparty/jqueryui/jquery-ui-droppable\",\n\t\"sap/ui/thirdparty/jqueryui/jquery-ui-draggable\"\n\n], function(Controller, LoginHandler, TMSHandler, MessageToast, Filter, Formatter) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"TMS.controller.storyboard\", {\n\n\t\tformatter: Formatter,\n\t\t/**\n\t\t * Called when a controller is instantiated and its View controls (if available) are already created.\n\t\t * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.\n\t\t * @memberOf TMS.view.storyboard\n\t\t */\n\t\tonInit: function() {\n\t\t\tthis.oRouter = this.getOwnerComponent().getRouter();\n\t\t\tthis.oRouter.getRoute(\"storyboard\").attachPatternMatched(this._onObjectMatched, this);\n\t\t},\n\n\t\t/**\n\t\t * Callback handler form hash pattern match\n\t\t * @memberOf TMS.view.landingpage\n\t\t * @param {sap.ui.base.Event} oEvent the hash pattern\n\t\t */\n\t\t_onObjectMatched: function(oEvent) {\n\t\t\tthis.oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n\t\t\tthis.oMainModel = this.getView().getModel();\n\t\t\tvar oParameter = oEvent.getParameter(\"arguments\");\n\t\t\tvar sUserId = oParameter.userid;\n\t\t\tthis.oUser = LoginHandler.getUserById(sUserId);\n\t\t\tvar sProjectId = oParameter.projectid;\n\t\t\tvar oCurrentProjectScope = TMSHandler.getProjectById(sProjectId);\n\t\t\tTMSHandler.setProjectScope(oCurrentProjectScope);\n\t\t\tif (this.oUser) {\n\t\t\t\tLoginHandler.setCurrentUserDetails(this.oUser);\n\t\t\t} else {\n\t\t\t\tthis.oRouter.navTo(\"login\");\n\t\t\t\tvar sMsg = this.oResourceBundle.getText(\"noauth\");\n\t\t\t\tMessageToast.show(sMsg);\n\t\t\t}\n\t\t\tthis.oAppStateModel = this.getView().getModel(\"appstate\");\n\n\t\t},\n\n\t\t/**\n\t\t * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered\n\t\t * (NOT before the first rendering! onInit() is used for that one!).\n\t\t * @memberOf TMS.view.storyboard\n\t\t */\n\t\t//\tonBeforeRendering: function() {\n\t\t//\n\t\t//\t},\n\n\t\t/**\n\t\t * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.\n\t\t * This hook is the same one that SAPUI5 controls get after being rendered.\n\t\t * @memberOf TMS.view.storyboard\n\t\t */\n\t\tonAfterRendering: function() {\n\t\t\tthis.updateListDragging();\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of create project button * \n\t\t * @memberOf TMS.view.storyboard \n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thandleStatusListTitleEdit: function(oEvent) {\n\t\t\tvar aContents = oEvent.getSource().getParent().getContent();\n\t\t\tif (oEvent.getSource().getSrc() === \"sap-icon://edit\") {\n\t\t\t\taContents[0].setVisible(false);\n\t\t\t\taContents[1].setVisible(true);\n\t\t\t\toEvent.getSource().setSrc(\"sap-icon://accept\");\n\t\t\t\tthis.oAppStateModel.refresh();\n\t\t\t} else if (oEvent.getSource().getSrc() === \"sap-icon://accept\") {\n\t\t\t\taContents[0].setVisible(true);\n\t\t\t\taContents[1].setVisible(false);\n\t\t\t\toEvent.getSource().setSrc(\"sap-icon://edit\");\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of add status list button * \n\t\t * @memberOf TMS.view.storyboard \n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thanldeStatusAddEvent: function(oEvent) {\n\t\t\tif (oEvent.getParameter(\"clearButtonPressed\")) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tvar sStatusText = oEvent.getSource().getValue();\n\t\t\t\tif (sStatusText) {\n\t\t\t\t\tTMSHandler.addStatusList(sStatusText);\n\t\t\t\t\toEvent.getSource().setValue(\"\");\n\t\t\t\t\tthis.updateListDragging();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of delet status list icon * \n\t\t * @memberOf TMS.view.storyboard \n\t\t * @param {sap.ui.base.Event} oEvent of the icon press event\n\t\t */\n\t\thandleDeleteStatusList: function(oEvent) {\n\t\t\tvar sStatusId = oEvent.getSource().data(\"statusid\");\n\t\t\tTMSHandler.removeStatusList(sStatusId);\n\t\t\tthis.updateListDragging();\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of List update finshed * \n\t\t * @memberOf TMS.view.storyboard \n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thandleUpdateFinished: function() {\n\t\t\tthis.updateListDragging();\n\t\t},\n\n\t\t/**\n\t\t * Method to set the Draggable properties to UI elements * \n\t\t * @memberOf TMS.view.storyboard \n\t\t */\n\t\tupdateListDragging: function() {\n\t\t\tvar aStatusList = this.getView().byId(\"idStatusListContainer\").getItems();\n\t\t\tvar sIdString = \"\";\n\t\t\tvar _self = this;\n\t\t\tif (aStatusList.length > 0) {\n\t\t\t\tfor (var iCount = 0; iCount < aStatusList.length; iCount++) {\n\t\t\t\t\tsIdString += aStatusList[iCount].getDragID();\n\t\t\t\t}\n\t\t\t\t$(sIdString.slice(0, -1)).sortable({\n\t\t\t\t\tconnectWith: \".ui-sortable\",\n\t\t\t\t\tunbind: \"update\",\n\t\t\t\t\tupdate: function(e, ui) {\n\t\t\t\t\t\tif (!ui.sender) {\n\t\t\t\t\t\t\t_self.updateDrop(e, ui);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}).disableSelection();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event Handle on Drag and Drop of UI elemenet \n\t\t * @jUery Global update event for Sortable functionality \n\t\t * @memberOf TMS.view.storyboard \n\t\t */\n\t\tupdateDrop: function(e, ui) {\n\t\t\tvar sItemID = ui.item.attr(\"id\");\n\t\t\tvar sContainerID = $(\"#\" + e.toElement.id).closest('ul').attr('id');\n\t\t\tsContainerID = sContainerID.replace(\"-listUl\", \"\");\n\t\t\tvar sItemContext = sap.ui.getCore().byId(sItemID).getBindingContextPath();\n\t\t\tvar oListUL = sap.ui.getCore().byId(sContainerID);\n\t\t\tvar sCurrentContextTaskId = oListUL.getItems()[0].data(\"taskid\");\n\t\t\tTMSHandler.updateItemDragged(sItemContext, sCurrentContextTaskId);\n\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of icon click* \n\t\t * @memberOf TMS.view.storyboard \n\t\t */\n\n\t\thandleAddIconStatusClick: function() {\n\t\t\tvar oStatusInput = this.getView().byId(\"idNewStatusFeild\");\n\t\t\toStatusInput.fireSearch();\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of delete icon \n\t\t * @memberOf TMS.view.storyboard \n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thandleDeleteTaskIcon: function(oEvent) {\n\t\t\tvar sId = oEvent.getSource().data(\"taskid\");\n\t\t\tTMSHandler.removeTaskonID(sId);\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of comment post\n\t\t * @memberOf TMS.view.storyboard \n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thandleOnCommentPost: function(oEvent) {\n\t\t\tvar sCommentText = oEvent.getParameter(\"value\");\n\t\t\tvar oTaskScope = this.oAppStateModel.getProperty(\"/taskscope\");\n\t\t\tvar oDate = new Date(),\n\t\t\t\tlocale = \"en-us\",\n\t\t\t\tmonth = oDate.toLocaleString(locale, {\n\t\t\t\t\tmonth: \"long\"\n\t\t\t\t});\n\t\t\tvar oTempComment = {\n\t\t\t\t\"Author\": this.oUser.id,\n\t\t\t\t\"AuthorPicUrl\": \"\",\n\t\t\t\t\"Type\": \"info\",\n\t\t\t\t\"Date\": month + \" \" + oDate.getDate() + \" \" + oDate.getFullYear(),\n\t\t\t\t\"Text\": sCommentText\n\t\t\t};\n\t\t\tvar aCommentList = oTaskScope.commentlist;\n\t\t\taCommentList.push(oTempComment);\n\t\t\toTaskScope.comments = aCommentList.length;\n\t\t\tthis.oAppStateModel.refresh();\n\t\t},\n\t\t/**\n\t\t * Callback handler on press event of plus icon \n\t\t * @memberOf TMS.view.storyboard \n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thandleAddTaskinList: function(oEvent) {\n\t\t\t// create popover\n\t\t\tif (!this._oEditPopover) {\n\t\t\t\tthis._oEditPopover = sap.ui.xmlfragment(\"TMS.view.fragments.statuslistedit\", this);\n\t\t\t\tthis.getView().addDependent(this._oEditPopover);\n\t\t\t}\n\t\t\tthis.sTaskContext = oEvent.getSource().data(\"statusid\");\n\t\t\tthis.bEditTrue = false;\n\t\t\tvar oNewTask = {\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"description\": \"\",\n\t\t\t\t\"type\": \"\",\n\t\t\t\t\"dirtytype\": \"TY01\",\n\t\t\t\t\"priority\": \"\",\n\t\t\t\t\"dirtypriority\": \"PR01\",\n\t\t\t\t\"assignee\": \"\",\n\t\t\t\t\"comments\": \"0\",\n\t\t\t\t\"commentlist\": [],\n\t\t\t\t\"attachments\": \"0\"\n\t\t\t};\n\t\t\tthis.oAppStateModel.setProperty(\"/taskscope\", oNewTask);\n\t\t\t// delay because addDependent will do a async rerendering and the actionSheet will immediately close without it.\n\t\t\tvar oIcon = oEvent.getSource();\n\t\t\tjQuery.sap.delayedCall(0, this, function() {\n\t\t\t\tthis._oEditPopover.openBy(oIcon);\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of plus icon \n\t\t * @memberOf TMS.view.fragments.statuslist \n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thandleTaskCreate: function(oEvent) {\n\t\t\tvar oTempTasks = this.oAppStateModel.getProperty(\"/taskscope\");\n\t\t\tvar aPriority = TMSHandler.getPrioritesbyID(oTempTasks.dirtypriority);\n\t\t\tvar aType = TMSHandler.getTypesbyID(oTempTasks.dirtytype);\n\t\t\toTempTasks.priority = aPriority;\n\t\t\toTempTasks.type = aType;\n\t\t\tif (this.bEditTrue) {\n\t\t\t\tthis.handleCloseEditPopover();\n\t\t\t\tthis.oAppStateModel.refresh();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (oTempTasks.title === \"\") {\n\t\t\t\tMessageToast.show(\"Please Enter a title to continue\");\n\t\t\t} else {\n\t\t\t\tTMSHandler.addTaskToStatusList(this.sTaskContext, oTempTasks);\n\t\t\t\tthis.handleCloseEditPopover();\n\t\t\t}\n\t\t},\n\t\thandleSuggestionItemSelected: function(oEvent) {\n\t\t\tif (oEvent.getParameter(\"selectedItem\")) {\n\t\t\t\tvar sId = oEvent.getParameter(\"selectedItem\").getKey();\n\t\t\t\tvar oTempTask = this.oAppStateModel.getProperty(\"/taskscope\");\n\t\t\t\toTempTask.assignee = sId;\n\t\t\t}\n\n\t\t},\n\n\t\thandleTaskEditPress: function(oEvent) {\n\t\t\tthis._oPopover.close();\n\t\t\tvar oTempTasks = this.oAppStateModel.getProperty(\"/taskscope\");\n\t\t\toTempTasks.dirtypriority = \"\";\n\t\t\tif (oTempTasks.priority.length === 3) {\n\t\t\t\toTempTasks.dirtypriority = \"PR01\";\n\t\t\t} else if (oTempTasks.priority.length === 2) {\n\t\t\t\toTempTasks.dirtypriority = \"PR02\";\n\t\t\t} else if (oTempTasks.priority.length === 1) {\n\t\t\t\toTempTasks.dirtypriority = \"PR03\";\n\t\t\t}\n\t\t\toTempTasks.dirtytype = oTempTasks.type.id;\n\t\t\tthis.oAppStateModel.refresh();\n\t\t\tif (!this._oEditPopover) {\n\t\t\t\tthis._oEditPopover = sap.ui.xmlfragment(\"TMS.view.fragments.statuslistedit\", this);\n\t\t\t\tthis.getView().addDependent(this._oEditPopover);\n\t\t\t}\n\t\t\tthis.bEditTrue = true;\n\n\t\t\tjQuery.sap.delayedCall(0, this, function() {\n\t\t\t\tthis._oEditPopover.openBy(this.oDisplayIcon);\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of create project button * \n\t\t * @memberOf TMS.view.fragment.statuslist \n\t\t * \n\t\t */\n\t\thandleCloseEditPopover: function() {\n\t\t\tthis._oEditPopover.close();\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of suggest username\n\t\t * @memberOf TMS.view.storyboard \n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thandleSuggest: function(oEvent) {\n\t\t\tvar sTerm = oEvent.getParameter(\"suggestValue\");\n\t\t\tvar aFilters = [];\n\t\t\tif (sTerm) {\n\t\t\t\taFilters.push(new Filter(\"firstname\", sap.ui.model.FilterOperator.StartsWith, sTerm));\n\t\t\t}\n\t\t\toEvent.getSource().getBinding(\"suggestionItems\").filter(aFilters);\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of display Task\n\t\t * @memberOf TMS.view.storyboard \n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\n\t\thandleShowTaskIcon: function(oEvent) {\n\t\t\tvar sTaskId = oEvent.getSource().data(\"taskid\");\n\t\t\tvar bSet = TMSHandler.setTaskScopeById(sTaskId);\n\t\t\tif (bSet) {\n\t\t\t\tif (!this._oPopover) {\n\t\t\t\t\tthis._oPopover = sap.ui.xmlfragment(\"TMS.view.fragments.statuslistdisplay\", this);\n\t\t\t\t\tthis.getView().addDependent(this._oPopover);\n\t\t\t\t}\n\t\t\t\tthis.oDisplayIcon = oEvent.getSource();\n\t\t\t\tjQuery.sap.delayedCall(0, this, function() {\n\t\t\t\t\tthis._oPopover.openBy(this.oDisplayIcon);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Called when the Controller is destroyed. Use this one to free resources and finalize activities.\n\t\t * @memberOf TMS.view.storyboard\n\t\t */\n\t\t//\tonExit: function() {\n\t\t//\n\t\t//\t}\n\n\t});\n\n});",
		"TMS/Component.js": "sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"TMS/model/models\",\n\t\"TMS/localservice/loginhandler\",\n\t\"TMS/localservice/tmshandler\"\n], function(UIComponent, Device, models, LoginHandler, TMSHandler) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"TMS.Component\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\t// call the base component's init function\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\n\t\t\tthis.getRouter().initialize();\n\n\t\t\tvar oAppStateModel = this.getModel(\"appstate\");\n\t\t\tvar oLoginModel = this.getModel(\"init_login\");\n\t\t\tvar oMainModel = this.getModel();\n\t\t\tLoginHandler.setModelReferences(oAppStateModel, oLoginModel);\n\t\t\tTMSHandler.setModelReferences(oAppStateModel, oMainModel);\n\t\t}\n\t});\n});",
		"TMS/view/storyboard.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" xmlns:TMS=\"TMS.control\"\n\tcontrollerName=\"TMS.controller.storyboard\" xmlns:html=\"http://www.w3.org/1999/xhtml\"\n\txmlns:app=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\">\n\t<Page class=\"storyboardpage\" xmlns:f=\"sap.f\" xmlns:l=\"sap.ui.layout\" title=\"{i18n>title}\" showHeader=\"false\" enableScrolling=\"true\">\n\t\t<content>\n\t\t\t<mvc:XMLView viewName=\"TMS.view.header\"/>\n\t\t\t<VBox height=\"30px\"></VBox>\n\t\t\t<ScrollContainer width=\"100%\" horizontal=\"true\">\n\t\t\t\t<HBox>\n\t\t\t\t\t<HBox id=\"idStatusListContainer\" class=\"statuslistcontainer\"\n\t\t\t\t\t\titems=\"{path: 'appstate>/currentproject/statuslist', templateShareable : false}\">\n\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t<TMS:List width=\"300px\" isDraggable=\"true\" showNoData=\"false\" app:statusid=\"{appstate>id}\"\n\t\t\t\t\t\t\t\titems=\"{path: 'appstate>tasklist', sorter: { path: 'priority', descending: true }, templateShareable : false}\"\n\t\t\t\t\t\t\t\tclass=\"sapUiMediumMarginBeginEnd\" updateFinished=\"handleUpdateFinished\">\n\t\t\t\t\t\t\t\t<TMS:headerToolbar>\n\t\t\t\t\t\t\t\t\t<Toolbar class=\"TMSUiStatusListHeaderToolBar\">\n\t\t\t\t\t\t\t\t\t\t<Title id=\"idStatusHeaderTitle\" text=\"{appstate>title}\"/>\n\t\t\t\t\t\t\t\t\t\t<Input id=\"idStatusHeaderTitleEdit\" class=\"TMSUiStatusListHeaderTitle\" value=\"{appstate>title}\" visible=\"hidden\"/>\n\t\t\t\t\t\t\t\t\t\t<core:Icon src=\"sap-icon://edit\" class=\"size3 sapUiSmallMarginEnd TMSUiStatusListHeaderIcons\" press=\"handleStatusListTitleEdit\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"#000000\"></core:Icon>\n\t\t\t\t\t\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t\t\t\t\t\t<core:Icon app:statusid=\"{appstate>id}\" src=\"sap-icon://add\" class=\"size3 sapUiSmallMarginEnd TMSUiStatusListHeaderIcons\"\n\t\t\t\t\t\t\t\t\t\t\tpress=\"handleAddTaskinList\" color=\"#ffffff\"></core:Icon>\n\t\t\t\t\t\t\t\t\t\t<core:Icon app:statusid=\"{appstate>id}\" src=\"sap-icon://delete\" class=\"size3 sapUiSmallMarginEnd TMSUiStatusListHeaderIcons\"\n\t\t\t\t\t\t\t\t\t\t\tpress=\"handleDeleteStatusList\" color=\"#ffffff\"></core:Icon>\n\t\t\t\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t\t\t\t</TMS:headerToolbar>\n\t\t\t\t\t\t\t\t<TMS:items>\n\t\t\t\t\t\t\t\t\t<CustomListItem app:taskid=\"{appstate>id}\">\n\t\t\t\t\t\t\t\t\t\t<l:BlockLayout id=\"BlockLayoutTwo\">\n\t\t\t\t\t\t\t\t\t\t\t<l:BlockLayoutRow>\n\t\t\t\t\t\t\t\t\t\t\t\t<l:BlockLayoutCell class=\"TMSUiDraggable\" title=\"{appstate>title}\" backgroundColorSet=\"ColorSet10\" backgroundColorShade=\"ShadeA\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Toolbar height=\"60px\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<VBox>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Label text=\"{path:'appstate>priority', formatter:'.formatter.setPriorityText'}\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HBox justifyContent=\"Start\" items=\"{ path:'appstate>priority', templateShareable : false}\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ProgressIndicator class=\"sapUiTinyMarginEnd TMSUiStatusListTaskBar\" percentValue=\"100%\" width=\"50px\" showValue=\"false\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate=\"{appstate>statuscolor}\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</HBox>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<VBox class=\"sapUiTinyMarginTopBottom\" alignItems=\"End\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Label text=\"{appstate>type/title}\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<f:Avatar src=\"{appstate>type/icon}\" class=\"sapUiTinyMarginBottom\" displaySize=\"XS\"></f:Avatar>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<OverflowToolbar>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<core:Icon app:taskid=\"{appstate>id}\" src=\"sap-icon://account\" class=\"size3 TMSUiStatusListHeaderIcons\" press=\"handleShowTaskIcon\"></core:Icon>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{path:'appstate>assignee', formatter:'.formatter.setUserName'}\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<core:Icon app:taskid=\"{appstate>id}\" src=\"sap-icon://comment\" class=\"size3 TMSUiStatusListHeaderIcons\" press=\"handleShowTaskIcon\"></core:Icon>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{appstate>comments}\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<core:Icon app:taskid=\"{appstate>id}\" src=\"sap-icon://attachment\" class=\"size3 TMSUiStatusListHeaderIcons\" press=\"handleShowTaskIcon\"></core:Icon>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Text text=\"{appstate>attachments}\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<core:Icon src=\"sap-icon://display\" app:taskid=\"{appstate>id}\" class=\"size3 TMSUiStatusListHeaderIcons\" press=\"handleShowTaskIcon\"></core:Icon>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<core:Icon src=\"sap-icon://delete\" app:taskid=\"{appstate>id}\" class=\"size3 TMSUiStatusListHeaderIcons\" press=\"handleDeleteTaskIcon\"></core:Icon>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</OverflowToolbar>\n\t\t\t\t\t\t\t\t\t\t\t\t</l:BlockLayoutCell>\n\t\t\t\t\t\t\t\t\t\t\t</l:BlockLayoutRow>\n\t\t\t\t\t\t\t\t\t\t</l:BlockLayout>\n\t\t\t\t\t\t\t\t\t</CustomListItem>\n\t\t\t\t\t\t\t\t</TMS:items>\n\t\t\t\t\t\t\t</TMS:List>\n\t\t\t\t\t\t</items>\n\t\t\t\t\t</HBox>\n\t\t\t\t\t<items>\n\t\t\t\t\t\t<SearchField id=\"idNewStatusFeild\" search=\"hanldeStatusAddEvent\" showSearchButton=\"false\" class=\"sapUiSizeCompact\"\n\t\t\t\t\t\t\tplaceholder=\"{i18n>newstatus}\"/>\n\t\t\t\t\t\t<core:Icon src=\"sap-icon://accept\" class=\"size3 sapUiTinyMarginBeginEnd sapUiTinyMarginTop \" press=\"handleAddIconStatusClick\"></core:Icon>\n\t\t\t\t\t</items>\n\t\t\t\t</HBox>\n\t\t\t</ScrollContainer>\n\t\t</content>\n\t</Page>\n</mvc:View>",
		"TMS/view/fragments/statuslistdisplay.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:f=\"sap.ui.layout.form\" xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:l=\"sap.ui.layout\" xmlns:u=\"sap.ui.unified\">\n\t<Popover title=\"{i18n>TMS}\" class=\"sapUiSizeCompact\" placement=\"Auto\">\n\t\t<VBox class=\"sapUiSmallMargin\">\n\t\t\t<f:Form editable=\"true\">\n\t\t\t\t<f:title>\n\t\t\t\t\t<core:Title text=\"{i18n>addtask}\"/>\n\t\t\t\t</f:title>\n\t\t\t\t<f:layout>\n\t\t\t\t\t<f:ResponsiveGridLayout labelSpanXL=\"4\" labelSpanL=\"4\" labelSpanM=\"4\" labelSpanS=\"12\" adjustLabelSpan=\"false\" emptySpanXL=\"0\" emptySpanL=\"0\"\n\t\t\t\t\t\temptySpanM=\"0\" emptySpanS=\"0\" columnsXL=\"3\" columnsL=\"2\" columnsM=\"2\" singleContainerFullSize=\"false\"/>\n\t\t\t\t</f:layout>\n\t\t\t\t<f:formContainers>\n\t\t\t\t\t<f:FormContainer title=\"{i18n>taskdetails}\">\n\t\t\t\t\t\t<f:formElements>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>taskname}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Text text=\"{appstate>/taskscope/title}\"/>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>description}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Text text=\"{appstate>/taskscope/description}\"/>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>priority}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Text text=\"{parts : [ 'appstate>/taskscope/priority', 'appstate>/taskscope/title' ], formatter:'.formatter.setPriorityText'}\"/>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>tasktype}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Text text=\"{appstate>/taskscope/type/title}\"/>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>assign}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Text text=\"{path:'appstate>/taskscope/assignee', formatter:'.formatter.setUserName'}\"/>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>attachments}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Text text=\"{appstate>/taskscope/attachments}\"/>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t</f:formElements>\n\t\t\t\t\t</f:FormContainer>\n\t\t\t\t\t<f:FormContainer title=\"{i18n>comments}\">\n\t\t\t\t\t\t<f:formElements>\n\t\t\t\t\t\t\t<f:FormElement>\n\t\t\t\t\t\t\t\t<FeedInput post=\"handleOnCommentPost\" icon=\"sap-icon://discussion-2\" class=\"sapUiSmallMarginTopBottom\">\n\t\t\t\t\t\t\t\t\t<layoutData>\n\t\t\t\t\t\t\t\t\t\t<l:GridData span=\"XL4 L12 M10 S4\"/>\n\t\t\t\t\t\t\t\t\t</layoutData>\n\t\t\t\t\t\t\t\t</FeedInput>\n\t\t\t\t\t\t\t\t<List class=\"sapUiSizeCompact\" showSeparators=\"Inner\" showNoData=\"false\" items=\"{appstate>/taskscope/commentlist}\">\n\t\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t\t<FeedListItem class=\"sapUiSizeCompact\" sender=\"{path:'appstate>Author', formatter: '.formatter.setUserName'}\" icon=\"{appstate>AuthorPicUrl}\"\n\t\t\t\t\t\t\t\t\t\t\ticonDensityAware=\"false\" info=\"{appstate>Type}\" timestamp=\"{appstate>Date}\" text=\"{appstate>Text}\"/>\n\t\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t</f:formElements>\n\t\t\t\t\t</f:FormContainer>\n\t\t\t\t</f:formContainers>\n\t\t\t</f:Form>\n\t\t</VBox>\n\t\t<footer>\n\t\t\t<Toolbar>\n\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t<Button id=\"idPopoverFooterSave\" type=\"Emphasized\" text=\"{i18n>edit}\" press=\"handleTaskEditPress\"/>\n\t\t\t</Toolbar>\n\t\t</footer>\n\t</Popover>\n</core:FragmentDefinition>",
		"TMS/view/myreport.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"TMS.controller.myreport\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:viz=\"sap.viz.ui5.controls\" xmlns:layout=\"sap.ui.layout\"\n\txmlns:viz.feeds=\"sap.viz.ui5.controls.common.feeds\" xmlns:viz.data=\"sap.viz.ui5.data\" height=\"100%\">\n\t<Page title=\"Title\" showHeader=\"false\">\n\t\t<content>\n\t\t\t<mvc:XMLView viewName=\"TMS.view.header\"/>\n\t\t\t<Panel width=\"auto\" class=\"sapUiResponsiveMargin\" accessibleRole=\"Region\">\n\t\t\t\t<headerToolbar>\n\t\t\t\t\t<Toolbar height=\"3rem\">\n\t\t\t\t\t\t<Title text=\"{i18n>mytasks}\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</headerToolbar>\n\t\t\t\t<content>\n\t\t\t\t\t<HBox>\n\t\t\t\t\t\t<viz:VizFrame id=\"idVizFrame\" vizProperties=\"{ title: {text : 'Task Visualization', visible : true}}\" uiConfig=\"{applicationSet:'fiori'}\" height='400px' width=\"600px\" vizType='donut'>\n\t\t\t\t\t\t\t<viz:dataset>\n\t\t\t\t\t\t\t\t<viz.data:FlattenedDataset data=\"{/TasksCollection}\">\n\t\t\t\t\t\t\t\t\t<viz.data:dimensions>\n\t\t\t\t\t\t\t\t\t\t<viz.data:DimensionDefinition name=\"tasktitle\" value=\"{title}\"/>\n\t\t\t\t\t\t\t\t\t</viz.data:dimensions>\n\t\t\t\t\t\t\t\t\t<viz.data:measures>\n\t\t\t\t\t\t\t\t\t\t<viz.data:MeasureDefinition name=\"assigned\" value=\"{ path:'type/weightage'}\"/>\n\t\t\t\t\t\t\t\t\t</viz.data:measures>\n\t\t\t\t\t\t\t\t</viz.data:FlattenedDataset>\n\t\t\t\t\t\t\t</viz:dataset>\n\t\t\t\t\t\t\t<viz:feeds>\n\t\t\t\t\t\t\t\t<viz.feeds:FeedItem uid=\"size\" type=\"Measure\" values=\"assigned\"/>\n\t\t\t\t\t\t\t\t<viz.feeds:FeedItem uid=\"color\" type=\"Dimension\" values=\"tasktitle\"/>\n\t\t\t\t\t\t\t</viz:feeds>\n\t\t\t\t\t\t</viz:VizFrame>\n\t\t\t\t\t\t<List headerText=\"{i18n>tasklist}\" id=\"idTaskMyList\" class=\"sapUiMarginLargeBegin\" width=\"100%\" items=\"{ path: '/TasksCollection' }\">\n\t\t\t\t\t\t\t<StandardListItem title=\"{title}\" description=\"{description}\" info=\"{path:'priority', formatter:'.formatter.setPriorityText'}\" icon=\"{type/icon}\" />\n\t\t\t\t\t\t</List>\n\t\t\t\t\t</HBox>\n\t\t\t\t</content>\n\t\t\t</Panel>\n\t\t</content>\n\t</Page>\n</mvc:View>",
		"TMS/controller/App.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"TMS.controller.App\", {\n\n\t\t/**\n\t\t * Called when a controller is instantiated and its View controls (if available) are already created.\n\t\t * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.\n\t\t * @memberOf TMS.view.App\n\t\t */\n\t\t//\tonInit: function() {\n\t\t//\n\t\t//\t},\n\n\t\t/**\n\t\t * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered\n\t\t * (NOT before the first rendering! onInit() is used for that one!).\n\t\t * @memberOf TMS.view.App\n\t\t */\n\t\t//\tonBeforeRendering: function() {\n\t\t//\n\t\t//\t},\n\n\t\t/**\n\t\t * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.\n\t\t * This hook is the same one that SAPUI5 controls get after being rendered.\n\t\t * @memberOf TMS.view.App\n\t\t */\n\t\t//\tonAfterRendering: function() {\n\t\t//\n\t\t//\t},\n\n\t\t/**\n\t\t * Called when the Controller is destroyed. Use this one to free resources and finalize activities.\n\t\t * @memberOf TMS.view.App\n\t\t */\n\t\t//\tonExit: function() {\n\t\t//\n\t\t//\t}\n\n\t});\n\n});",
		"TMS/control/List.js": "sap.ui.define([\n\t'jquery.sap.global',\n\t'sap/m/List'\n], function(jQuery, List) {\n\t\"use strict\";\n\n\tvar oList = List.extend(\"TMS.control.List\", {\n\t\tmetadata: {\n\t\t\tproperties: {\n\t\t\t\t\"isDraggable\": {\n\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\tdefaultValue: false,\n\t\t\t\t\tbindable: \"bindable\"\n\t\t\t\t},\n\t\t\t\t\"dragID\": {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdefaultValue: null\n\t\t\t\t},\n\t\t\t\taggregations: {\n\t\t\t\t\tcardholder: {\n\t\t\t\t\t\ttype: \"sap.ui.core.Control\",\n\t\t\t\t\t\tmultiple: true,\n\t\t\t\t\t\tbindable: \"bindable\"\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t},\n\t\trenderer: {\n\t\t\trenderContainerAttributes: function(rm, oControl) {\n\t\t\t\tif (oControl.getIsDraggable()) {\n\t\t\t\t\toControl.setDragID(\"#\" + oControl.getId(\"listUl\") + \",\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn oList;\n\n});",
		"TMS/control/TaskCard.js": "sap.ui.define(['jquery.sap.global',\n\t\t'sap/ui/core/Control'\n\t],\n\tfunction(jQuery, Control) {\n\t\t\"use strict\";\n\n\t\t/**\n\t\t * Constructor for a new Status Card.\n\t\t *\n\t\t * @param {string} [sId] The ID for the new control, generated automatically if no ID is given\n\t\t * @param {object} [mSettings] The Initial settings for the new control\n\t\t *\n\t\n\t\t *\n\t\t * @constructor\n\t\t * @public\n\t\t * @alias TMS.control.Taskcard\n\t\t */\n\t\tvar oStatusCard = Control.extend(\"TMS.control.TaskCard\", /** @lends sap.m.CheckBox.prototype */ {\n\t\t\tmetadata: {\n\t\t\t\tproperties: {\n\t\t\t\t\t\"title\": {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tdefaultValue: null,\n\t\t\t\t\t\tbindable: \"bindable\"\n\t\t\t\t\t},\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tdefaultValue: null,\n\t\t\t\t\t\tbindable: \"bindable\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\taggregations: {},\n\t\t\t\tassociations: {},\n\t\t\t\tevents: {\n\t\t\t\t\t// tap: {},\n\t\t\t\t\tpress: {}\n\t\t\t\t},\n\t\t\t\t// ,\n\t\t\t\t// onclick: function(evt) {\n\t\t\t\t// \tthis.firePress();\n\t\t\t\t// },\n\t\t\t\trenderer: \"TMS.control.TaskCardRenderer\"\n\t\t\t}\n\t\t});\n\n\t\toStatusCard.prototype.ontap = function(oEvent) {\n\t\t\tdebugger;\n\t\t\tthis.firePress();\n\t\t};\n\t\t\n\t\toStatusCard.prototype.onpress = function(oEvent) {\n\t\t\tdebugger;\n\t\t\tthis.firePress();\n\t\t};\n\n\t\treturn oStatusCard;\n\n\t}, /* bExport= */ true);",
		"TMS/control/TaskCardRenderer.js": "sap.ui.define(['jquery.sap.global', 'sap/ui/core/Renderer'],\n\tfunction(jQuery, Renderer) {\n\t\t\"use strict\";\n\n\t\t/**\n\t\t * Task Card renderer.\n\t\t *\n\t\t * @author Pavan Athreyas S J\n\t\t * @namespace\n\t\t */\n\t\tvar TaskCardRenderer = {};\n\n\t\t/**\n\t\t * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.\n\t\t *\n\t\t * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.\n\t\t * @param {sap.m.Text} oText An object representation of the control that should be rendered.\n\t\t */\n\t\tTaskCardRenderer.render = function(oRm, oControl) {\n\t\t\t// get control values\n\t\t\tvar sTitle = oControl.getTitle(),\n\t\t\t\tsDescription = oControl.getDescription(true);\n\n\t\t\t// start writing html\n\t\t\toRm.write(\"<div\");\n\t\t\toRm.addClass(\"card\");\n\t\t\toRm.writeControlData(oControl);\n\t\t\toRm.writeClasses();\n\t\t\toRm.write(\">\");\n\n\t\t\toRm.write(\"<div\");\n\t\t\toRm.addClass(\"content\");\n\t\t\toRm.writeClasses();\n\t\t\toRm.write(\">\");\n\n\t\t\toRm.write(\"<div\");\n\t\t\toRm.addClass(\"front\");\n\t\t\toRm.writeClasses();\n\n\t\t\toRm.write(\">\");\n\n\t\t\toRm.writeEscaped(sTitle);\n\n\t\t\toRm.write(\"</div>\");\n\n\t\t\toRm.write(\"<div\");\n\t\t\toRm.addClass(\"back\");\n\t\t\toRm.writeClasses();\n\t\t\toRm.write(\">\");\n\n\t\t\toRm.write(\"<p>\");\n\t\t\toRm.writeEscaped(sDescription);\n\t\t\toRm.write(\"</p>\");\n\t\t\toRm.write(\"</div>\");\n\n\t\t\toRm.write(\"</div>\");\n\t\t\toRm.write(\"</div>\");\n\n\t\t};\n\n\t\treturn TaskCardRenderer;\n\n\t}, /* bExport= */ true);",
		"TMS/controller/myreport.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"TMS/localservice/loginhandler\",\n\t\"sap/m/MessageToast\",\n\t\"TMS/localservice/formatter\"\n], function(Controller, LoginHandler, MessageToast, Formatter) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"TMS.controller.myreport\", {\n\n\t\tformatter: Formatter,\n\t\t/**\n\t\t * Called when a controller is instantiated and its View controls (if available) are already created.\n\t\t * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.\n\t\t * @memberOf TMS.view.myreport\n\t\t */\n\t\tonInit: function() {\n\t\t\tthis.oRouter = this.getOwnerComponent().getRouter();\n\t\t\tthis.oRouter.getRoute(\"report\").attachPatternMatched(this._onObjectMatched, this);\n\t\t},\n\n\t\t_onObjectMatched: function(oEvent) {\n\t\t\tthis.oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n\t\t\tthis.oMainModel = this.getView().getModel();\n\t\t\tvar oParameter = oEvent.getParameter(\"arguments\");\n\t\t\tvar sUserId = oParameter.userid;\n\t\t\tthis.oUser = LoginHandler.getUserById(sUserId);\n\t\t\tif (this.oUser) {\n\t\t\t\tLoginHandler.setCurrentUserDetails(this.oUser);\n\t\t\t} else {\n\t\t\t\tthis.oRouter.navTo(\"login\");\n\t\t\t\tvar sMsg = this.oResourceBundle.getText(\"noauth\");\n\t\t\t\tMessageToast.show(sMsg);\n\t\t\t}\n\t\t\tthis.oAppStateModel = this.getView().getModel(\"appstate\");\n\t\t\tthis.updateUserFilters();\n\t\t},\n\n\t\t/**\n\t\t * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered\n\t\t * (NOT before the first rendering! onInit() is used for that one!).\n\t\t * @memberOf TMS.view.myreport\n\t\t */\n\t\t//\tonBeforeRendering: function() {\n\t\t//\n\t\t//\t},\n\n\t\t/**\n\t\t * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.\n\t\t * This hook is the same one that SAPUI5 controls get after being rendered.\n\t\t * @memberOf TMS.view.myreport\n\t\t */\n\t\tonAfterRendering: function() {\n\n\t\t},\n\n\t\tupdateUserFilters: function() {\n\t\t\t// create new filter  \n\t\t\tvar aFilters = [];\n\t\t\tvar oUserFilter = new sap.ui.model.Filter(\"assignee\", sap.ui.model.FilterOperator.EQ, this.oUser.id);\n\t\t\taFilters.push(oUserFilter);\n\t\t\tvar oVizFrame = this.getView().byId(\"idVizFrame\");\n\t\t\toVizFrame.getDataset().getBinding(\"data\").filter(aFilters);\n\t\t\tvar oList = this.getView().byId(\"idTaskMyList\");\n\t\t\tvar oBinding = oList.getBinding(\"items\");\n\t\t\toBinding.filter(aFilters);\n\t\t}\n\n\t\t/**\n\t\t * Called when the Controller is destroyed. Use this one to free resources and finalize activities.\n\t\t * @memberOf TMS.view.myreport\n\t\t */\n\t\t//\tonExit: function() {\n\t\t//\n\t\t//\t}\n\n\t});\n\n});",
		"TMS/view/fragments/addproject.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:f=\"sap.ui.layout.form\" xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:l=\"sap.ui.layout\">\n\t<Dialog title=\"{i18n>title}\">\n\t\t<content>\n\t\t\t<f:SimpleForm id=\"SimpleFormChange471\" editable=\"true\" title=\"{i18n>createproject}\">\n\t\t\t\t<f:content>\n\t\t\t\t\t<Label text=\"{i18n>name}\"/>\n\t\t\t\t\t<Input value=\"{appstate>/newproject/title}\" valueLiveUpdate=\"true\"/>\n\t\t\t\t\t<Label text=\"{i18n>description}\"/>\n\t\t\t\t\t<Input value=\"{appstate>/newproject/description}\"></Input>\n\t\t\t\t</f:content>\n\t\t\t</f:SimpleForm>\n\t\t</content>\n\t\t<beginButton>\n\t\t\t<Button text=\"{i18n>submit}\" press=\"hanldeProjectCreate\"/>\n\t\t</beginButton>\n\t\t<endButton>\n\t\t\t<Button text=\"{i18n>close}\" press=\"handleCloseDialog\"/>\n\t\t</endButton>\n\t</Dialog>\n</core:FragmentDefinition>",
		"TMS/controller/landingpage.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"TMS/localservice/loginhandler\",\n\t\"TMS/localservice/tmshandler\",\n\t\"TMS/localservice/formatter\",\n\t'sap/m/MessageToast'\n], function(Controller, LoginHandler, TMSHandler, Formatter, MessageToast) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"TMS.controller.landingpage\", {\n\n\t\tformatter: Formatter,\n\t\t/**\n\t\t * Called when a controller is instantiated and its View controls (if available) are already created.\n\t\t * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.\n\t\t * @memberOf TMS.view.landingpage\n\t\t */\n\t\tonInit: function() {\n\t\t\tthis.oRouter = this.getOwnerComponent().getRouter();\n\t\t\tthis.oRouter.getRoute(\"dashboard\").attachPatternMatched(this._onObjectMatched, this);\n\t\t},\n\n\t\t/**\n\t\t * Callback handler form hash pattern match\n\t\t * @memberOf TMS.view.landingpage\n\t\t * @param {sap.ui.base.Event} oEvent the hash pattern\n\t\t */\n\t\t_onObjectMatched: function(oEvent) {\n\t\t\tthis.oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n\t\t\tthis.oMainModel = this.getView().getModel();\n\t\t\tthis.sUserId = oEvent.getParameter(\"arguments\").userid;\n\t\t\tvar oUser = LoginHandler.getUserById(this.sUserId);\n\t\t\tif (oUser) {\n\t\t\t\tLoginHandler.setCurrentUserDetails(oUser);\n\t\t\t} else {\n\t\t\t\tthis.oRouter.navTo(\"login\");\n\t\t\t\tvar sMsg = this.oResourceBundle.getText(\"noauth\");\n\t\t\t\tMessageToast.show(sMsg);\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of create project button\n\t\t * @memberOf TMS.view.landingpage\n\t\t */\n\t\thandleCreateProject: function() {\n\t\t\tif (!this._oDialog) {\n\t\t\t\tthis._oDialog = sap.ui.xmlfragment(\"TMS.view.fragments.addproject\", this);\n\t\t\t\tthis.getView().addDependent(this._oDialog);\n\t\t\t}\n\t\t\tthis.bProjectEdit = false;\n\t\t\tvar oTempProject = {};\n\t\t\toTempProject.title = \"\";\n\t\t\toTempProject.description = \"\";\n\t\t\toTempProject.status = {\n\t\t\t\t\"id\": \"S01\",\n\t\t\t\t\"title\": \"New\",\n\t\t\t\t\"color\": \"Grey\",\n\t\t\t\t\"class\": \"TMSStatusNew\"\n\t\t\t};\n\t\t\toTempProject.scope = \"\";\n\t\t\toTempProject.statuslist = [];\n\t\t\tthis.getView().getModel(\"appstate\").setProperty(\"/newproject\", oTempProject);\n\t\t\t// delay because addDependent will do a async rerendering and the actionSheet will immediately close without it.\n\t\t\tjQuery.sap.delayedCall(0, this, function() {\n\t\t\t\tthis._oDialog.open();\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of create project button\n\t\t * @memberOf TMS.view.fragment.addproject\n\t\t */\n\t\thandleCloseDialog: function() {\n\t\t\tthis._oDialog.close();\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of create project button\n\t\t * @memberOf TMS.view.fragment.addproject\n\t\t */\n\t\thanldeProjectCreate: function() {\n\t\t\tvar oTempProject = this.getView().getModel(\"appstate\").getProperty(\"/newproject\");\n\t\t\tif (this.getView().byId(\"idProjectEdit\").getIcon() === \"sap-icon://accept\") {\n\t\t\t\toTempProject.scope = \"Actions\";\n\t\t\t} else {\n\t\t\t\toTempProject.scope = \"Display\";\n\t\t\t}\n\t\t\tif (!this.bProjectEdit) {\n\t\t\t\tTMSHandler.registerProject(oTempProject);\n\t\t\t} else {\n\t\t\t\tthis.oMainModel.refresh();\n\t\t\t}\n\n\t\t\tthis._oDialog.close();\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of Edit project button\n\t\t * @memberOf TMS.view.landingpage\n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thandleProjectEditPress: function(oEvent) {\n\t\t\tvar sIconName = oEvent.getSource().getIcon();\n\t\t\tvar aProjectList = this.oMainModel.getProperty(\"/ProjectCollection\");\n\t\t\tvar iLen = aProjectList.length;\n\t\t\tvar iCount;\n\t\t\tif (sIconName === \"sap-icon://edit\") {\n\t\t\t\toEvent.getSource().setIcon(\"sap-icon://accept\");\n\t\t\t\tfor (iCount = 0; iCount < iLen; iCount++) {\n\t\t\t\t\taProjectList[iCount][\"scope\"] = \"Actions\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toEvent.getSource().setIcon(\"sap-icon://edit\");\n\t\t\t\tfor (iCount = 0; iCount < iLen; iCount++) {\n\t\t\t\t\taProjectList[iCount][\"scope\"] = \"Display\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.oMainModel.refresh();\n\n\t\t},\n\n\t\t/**\n\t\t * Callback handler on press event of Project Tile\n\t\t * @memberOf TMS.view.landingpage\n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\tHandleProjectPress: function(oEvent) {\n\t\t\tvar sScope = oEvent.getParameter(\"scope\");\n\t\t\tvar sAction = oEvent.getParameter(\"action\");\n\t\t\tvar sPath = oEvent.getSource().getBindingContext().sPath;\n\t\t\tif (sAction === \"Remove\") {\n\t\t\t\tTMSHandler.removeProject(sPath);\n\t\t\t}\n\t\t\tif (sAction === \"Press\" && sScope === \"Actions\") {\n\t\t\t\tthis.openEditPerspective(sPath);\n\t\t\t\tthis.bProjectEdit = true;\n\t\t\t}\n\t\t\tif (sAction === \"Press\" && sScope === \"Display\") {\n\t\t\t\tvar sCurrentProjectScope = TMSHandler.getProjectById(this.oMainModel.getProperty(sPath).id);\n\t\t\t\tTMSHandler.setProjectScope(sCurrentProjectScope);\n\t\t\t\tthis.oRouter.navTo(\"storyboard\", {\n\t\t\t\t\tuserid : this.sUserId,\n\t\t\t\t\tprojectid: this.oMainModel.getProperty(sPath).id\n\t\t\t\t});\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Method called when the user clicks on project in edit mode\n\t\t * @memberOf TMS.view.landingpage\n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\topenEditPerspective: function(sPath) {\n\t\t\tif (!this._oDialog) {\n\t\t\t\tthis._oDialog = sap.ui.xmlfragment(\"TMS.view.fragments.addproject\", this);\n\t\t\t\tthis.getView().addDependent(this._oDialog);\n\t\t\t}\n\n\t\t\tvar oTempProject = this.oMainModel.getProperty(sPath);\n\t\t\tthis.getView().getModel(\"appstate\").setProperty(\"/newproject\", oTempProject);\n\n\t\t\t// delay because addDependent will do a async rerendering and the actionSheet will immediately close without it.\n\t\t\tjQuery.sap.delayedCall(0, this, function() {\n\t\t\t\tthis._oDialog.open();\n\t\t\t});\n\t\t}\n\n\t});\n});",
		"TMS/view/header.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"TMS.controller.header\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:tnt=\"sap.tnt\">\n\t<tnt:ToolHeader>\n\t\t<Button icon=\"sap-icon://home\" press=\"handleHomePress\" type=\"Transparent\">\n\t\t\t<layoutData>\n\t\t\t\t<OverflowToolbarLayoutData priority=\"Never\"/>\n\t\t\t</layoutData>\n\t\t</Button>\n\t\t<ToolbarSpacer/>\n\t\t<Title text=\"{i18n>title}\">\n\t\t\t<layoutData>\n\t\t\t\t<OverflowToolbarLayoutData priority=\"Disappear\"/>\n\t\t\t</layoutData>\n\t\t</Title>\n\t\t<ToolbarSpacer/>\n\t\t<Button icon=\"sap-icon://learning-assistant\" type=\"Transparent\" press=\"HandleReportPress\"></Button>\n\t\t<MenuButton type=\"Transparent\" class=\"usermenu\" text=\"{appstate>/loggedinuser/firstname} {appstate>/loggedinuser/lastname}\">\n\t\t\t<layoutData>\n\t\t\t\t<OverflowToolbarLayoutData priority=\"Never\"/>\n\t\t\t</layoutData>\n\t\t\t<menu>\n\t\t\t\t<Menu itemSelected=\"handleMenuItemPress\">\n\t\t\t\t\t<items>\n\t\t\t\t\t\t<MenuItem text=\"{i18n>usersettings}\" key=\"1\" icon=\"sap-icon://settings\"/>\n\t\t\t\t\t\t<MenuItem text=\"{i18n>logout}\" key=\"2\" icon=\"sap-icon://log\"/>\n\t\t\t\t\t</items>\n\t\t\t\t</Menu>\n\t\t\t</menu>\n\t\t</MenuButton>\n\t</tnt:ToolHeader>\n</mvc:View>",
		"TMS/view/landingpage.view.xml": "<mvc:View controllerName=\"TMS.controller.landingpage\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\" xmlns=\"sap.m\" xmlns:TMS=\"TMS.control\">\n\t<Page class=\"dashboardpage \" title=\"{i18n>title}\" showHeader=\"false\" enableScrolling=\"false\">\n\t\t<content>\n\t\t\t<mvc:XMLView viewName=\"TMS.view.header\"/>\n\t\t\t<!--<TMS:TaskCard title=\"bitch\" description=\"ohyes\"></TMS:TaskCard>-->\n\t\t\t<HBox height=\"100px\" alignItems=\"Start\" justifyContent=\"End\">\n\t\t\t\t<items>\n\t\t\t\t\t<Button icon=\"sap-icon://add\" class=\"sapUiTinyMarginEnd\" type=\"Transparent\" press=\"handleCreateProject\"/>\n\t\t\t\t\t<Button icon=\"sap-icon://edit\" id=\"idProjectEdit\" class=\"sapUiTinyMarginEnd\" type=\"Transparent\" press=\"handleProjectEditPress\"/>\n\t\t\t\t</items>\n\t\t\t</HBox>\n\t\t\t\n\t\t\t<HBox justifyContent=\"Center\" alignItems=\"Center\" alignContent=\"Center\" items=\"{/ProjectCollection}\">\n\t\t\t\t<GenericTile\n\t\t\t\t\tclass=\"sapUiTinyMarginBegin sapUiTinyMarginTop projecttile\" scope=\"{scope}\" header=\"{title}\" subheader=\"{overallstatus}\" frameType=\"OneByOne\"\n\t\t\t\t\tpress=\"HandleProjectPress\"></GenericTile>\n\t\t\t\t<!--<TMS:TaskCard title=\"{title}\" press=\"HandleProjectPress\" description=\"{description}\"></TMS:TaskCard>-->\n\t\t\t</HBox>\n\t\t</content>\n\t</Page>\n</mvc:View>",
		"TMS/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t}\n\n\t};\n});",
		"TMS/controller/header.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"TMS/localservice/loginhandler\"\n], function(Controller, LoginHandler) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"TMS.controller.header\", {\n\n\t\t/**\n\t\t * Called when a controller is instantiated and its View controls (if available) are already created.\n\t\t * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.\n\t\t * @memberOf TMS.view.header\n\t\t */\n\t\t//\tonInit: function() {\n\t\t//\n\t\t//\t},\n\n\t\t/**\n\t\t * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered\n\t\t * (NOT before the first rendering! onInit() is used for that one!).\n\t\t * @memberOf TMS.view.header\n\t\t */\n\t\t//\tonBeforeRendering: function() {\n\t\t//\n\t\t//\t},\n\n\t\t/**\n\t\t * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.\n\t\t * This hook is the same one that SAPUI5 controls get after being rendered.\n\t\t * @memberOf TMS.view.header\n\t\t */\n\t\t// onAfterRendering: function() {\n\t\t//\n\t\t// },\n\n\t\t/**\n\t\t * Called when the Controller is destroyed. Use this one to free resources and finalize activities.\n\t\t * @memberOf TMS.view.header\n\t\t */\n\t\t//\tonExit: function() {\n\t\t//\n\t\t//\t}\n\n\t\thandleHomePress: function() {\n\t\t\tvar oRouter = this.getOwnerComponent().getRouter();\n\t\t\toRouter.navTo(\"dashboard\", {\n\t\t\t\tuserid: this.getView().getModel(\"appstate\").getProperty(\"/loggedinuser\").id\n\t\t\t});\n\t\t},\n\n\t\thandleMenuItemPress: function(oEvent) {\n\t\t\tvar sKey = oEvent.getParameter(\"item\").getKey();\n\t\t\tif (sKey === \"2\") {\n\t\t\t\tthis.handleLogoutRequest();\n\t\t\t} else {\n\t\t\t\t// this.handlePersonalizationClick();\n\t\t\t}\n\t\t},\n\n\t\tHandleReportPress: function(oEvent) {\n\t\t\tvar oRouter = this.getOwnerComponent().getRouter();\n\t\t\toRouter.navTo(\"report\", {\n\t\t\t\tuserid: this.getView().getModel(\"appstate\").getProperty(\"/loggedinuser\").id\n\t\t\t});\n\t\t},\n\n\t\thandleLogoutRequest: function(oEvent) {\n\t\t\tLoginHandler.setCurrentUserDetails({});\n\t\t\tthis.getOwnerComponent().getRouter().navTo(\"login\");\n\t\t}\n\n\t});\n\n});",
		"TMS/view/fragments/statuslistedit.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:f=\"sap.ui.layout.form\" xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:l=\"sap.ui.layout\" xmlns:u=\"sap.ui.unified\">\n\t<Popover title=\"{i18n>TASK}\" class=\"sapUiSizeCompact\" placement=\"Auto\" initialFocus=\"email\">\n\t\t<VBox class=\"sapUiSmallMargin\">\n\t\t\t<f:Form editable=\"true\">\n\t\t\t\t<f:title>\n\t\t\t\t\t<core:Title text=\"{i18n>addtask}\"/>\n\t\t\t\t</f:title>\n\t\t\t\t<f:layout>\n\t\t\t\t\t<f:ResponsiveGridLayout labelSpanXL=\"4\" labelSpanL=\"4\" labelSpanM=\"4\" labelSpanS=\"12\" adjustLabelSpan=\"false\" emptySpanXL=\"0\" emptySpanL=\"0\"\n\t\t\t\t\t\temptySpanM=\"0\" emptySpanS=\"0\" columnsXL=\"3\" columnsL=\"2\" columnsM=\"2\" singleContainerFullSize=\"false\"/>\n\t\t\t\t</f:layout>\n\t\t\t\t<f:formContainers>\n\t\t\t\t\t<f:FormContainer title=\"{i18n>taskdetails}\">\n\t\t\t\t\t\t<f:formElements>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>taskname}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Input id=\"idSEdittatusNewTitle\" valueLiveUpdate=\"true\" valueState=\"{appstate>/taskscope/titlestate}\" value=\"{appstate>/taskscope/title}\"/>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>description}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<TextArea value=\"{appstate>/taskscope/description}\" valueLiveUpdate=\"true\"/>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>priority}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Select selectedKey=\"{appstate>/taskscope/dirtypriority}\" items=\"{/PrioritiesCollection}\">\n\t\t\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t\t\t<core:Item text=\"{title}\" key=\"{id}\"/>\n\t\t\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>tasktype}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Select selectedKey=\"{appstate>/taskscope/dirtytype}\" items=\"{/TypesCollection}\">\n\t\t\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t\t\t<core:Item text=\"{title}\" key=\"{id}\"/>\n\t\t\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>assigned}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<Input type=\"Text\" suggest=\"handleSuggest\" value=\"{path:'appstate>/taskscope/assignee', formatter:'.formatter.setUserName'}\"\n\t\t\t\t\t\t\t\t\t\tvalueLiveUpdate=\"true\" placeholder=\"{i18n>enterusername}\" suggestionItemSelected=\"handleSuggestionItemSelected\" showSuggestion=\"true\"\n\t\t\t\t\t\t\t\t\t\tsuggestionItems=\"{init_login>/}\">\n\t\t\t\t\t\t\t\t\t\t<suggestionItems>\n\t\t\t\t\t\t\t\t\t\t\t<core:Item key=\"{init_login>id}\" text=\"{init_login>firstname} {init_login>lastname}\"/>\n\t\t\t\t\t\t\t\t\t\t</suggestionItems>\n\t\t\t\t\t\t\t\t\t</Input>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t<f:FormElement label=\"{i18n>attachments}\">\n\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t<u:FileUploader name=\"myFileUpload\" uploadUrl=\"upload/\" width=\"100%\" uploadComplete=\"handleUploadComplete\"/>\n\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t</f:formElements>\n\t\t\t\t\t</f:FormContainer>\n\t\t\t\t\t<f:FormContainer title=\"{i18n>comments}\">\n\t\t\t\t\t\t<f:formElements>\n\t\t\t\t\t\t\t<f:FormElement>\n\t\t\t\t\t\t\t\t<FeedInput post=\"handleOnCommentPost\" icon=\"sap-icon://discussion-2\" class=\"sapUiSmallMarginTopBottom\">\n\t\t\t\t\t\t\t\t\t<layoutData>\n\t\t\t\t\t\t\t\t\t\t<l:GridData span=\"XL4 L12 M10 S4\"/>\n\t\t\t\t\t\t\t\t\t</layoutData>\n\t\t\t\t\t\t\t\t</FeedInput>\n\t\t\t\t\t\t\t\t<List class=\"sapUiSizeCompact\" showSeparators=\"Inner\" showNoData=\"false\" items=\"{appstate>/taskscope/commentlist}\">\n\t\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t\t<FeedListItem class=\"sapUiSizeCompact\" sender=\"{path:'appstate>Author', formatter: '.formatter.setUserName'}\" icon=\"{appstate>AuthorPicUrl}\"\n\t\t\t\t\t\t\t\t\t\t\ticonDensityAware=\"false\" info=\"{appstate>Type}\" timestamp=\"{appstate>Date}\" text=\"{appstate>Text}\"/>\n\t\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t</f:formElements>\n\t\t\t\t\t</f:FormContainer>\n\t\t\t\t</f:formContainers>\n\t\t\t</f:Form>\n\t\t</VBox>\n\t\t<footer>\n\t\t\t<Toolbar>\n\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t<Button id=\"idEditPopoverFooterSave\" text=\"{i18n>submit}\" press=\"handleTaskCreate\"/>\n\t\t\t\t<Button id=\"idEditPopoverFooterClose\" text=\"{i18n>close}\" press=\"handleCloseEditPopover\"/>\n\t\t\t</Toolbar>\n\t\t</footer>\n\t</Popover>\n</core:FragmentDefinition>",
		"TMS/controller/login.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"TMS/localservice/loginhandler\",\n\t'sap/m/MessageToast'\n], function(Controller, LoginHandler, MessageToast) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"TMS.controller.login\", {\n\n\t\t/**\n\t\t * Called when a controller is instantiated and its View controls (if available) are already created.\n\t\t * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.\n\t\t * @memberOf TMS.view.login\n\t\t */\n\t\tonInit: function() {\n\t\t\tthis.oRouter = this.getOwnerComponent().getRouter();\n\t\t},\n\n\t\t/**\n\t\t * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered\n\t\t * (NOT before the first rendering! onInit() is used for that one!).\n\t\t * @memberOf TMS.view.login\n\t\t */\n\t\t//\tonBeforeRendering: function() {\n\t\t//\n\t\t//\t},\n\n\t\t/**\n\t\t * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.\n\t\t * This hook is the same one that SAPUI5 controls get after being rendered.\n\t\t * @memberOf TMS.view.login\n\t\t */\n\t\tonAfterRendering: function() {\n\n\t\t},\n\n\t\t/**\n\t\t * Callback handler of Submit Button Press in login screen\n\t\t * @memberOf TMS.view.login\n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\t\thandleLoginPress: function(oEvent) {\n\t\t\tvar oUserNameFeild = this.getView().byId(\"idUserNameFeild\");\n\t\t\tvar oPassowrdFeild = this.getView().byId(\"idPasswordFeild\");\n\t\t\tvar sUserName = oUserNameFeild.getValue();\n\t\t\tvar sPassword = oPassowrdFeild.getValue();\n\n\t\t\tif (!sUserName || !sPassword) {\n\t\t\t\tvar sMsg = \"Please Enter Valid Credentials\";\n\t\t\t\tMessageToast.show(sMsg);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar oExistingUser = LoginHandler.authenticateUser(sUserName, sPassword);\n\n\t\t\tif (oExistingUser.hasOwnProperty(\"id\")) {\n\t\t\t\tthis.oRouter.navTo(\"dashboard\", {\n\t\t\t\t\tuserid: oExistingUser.id\n\t\t\t\t});\n\t\t\t\toUserNameFeild.setValue(\"\");\n\t\t\t\toPassowrdFeild.setValue(\"\");\n\t\t\t} else {\n\t\t\t\tMessageToast.show(oExistingUser.errmsg);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Callback handler of Register Button Press in login screen\n\t\t * @memberOf TMS.view.login\n\t\t * @param {sap.ui.base.Event} oEvent the button press event\n\t\t */\n\n\t\thandleRegisterUser: function(oEvent) {\n\t\t\tvar oNewUser = this.getView().getModel(\"appstate\").getProperty(\"/newuser\");\n\t\t\tvar sMsg = LoginHandler.registerUser(oNewUser);\n\t\t\tthis.handleCancelPress();\n\t\t\tMessageToast.show(sMsg);\n\t\t},\n\n\t\t/**\n\t\t * Callback handler of Register Button Press in login screen\n\t\t * @memberOf TMS.view.login\n\t\t */\n\n\t\thandleShowRegister: function() {\n\t\t\tvar oLoginPanel = this.getView().byId(\"idLoginPanel\");\n\t\t\tvar oRegisterPanel = this.getView().byId(\"idRegisterPanel\");\n\t\t\toLoginPanel.setVisible(false);\n\t\t\toRegisterPanel.setVisible(true);\n\t\t\tvar oNewUser = {};\n\t\t\toNewUser.firstname = \"\";\n\t\t\toNewUser.lastname = \"\";\n\t\t\toNewUser.email = \"\";\n\t\t\toNewUser.username = \"\";\n\t\t\toNewUser.password = \"\";\n\t\t\tthis.getView().getModel(\"appstate\").setProperty(\"/newuser\", oNewUser);\n\t\t},\n\n\t\t/**\n\t\t * Callback handler of Cancel Button Press in login screen\n\t\t * @memberOf TMS.view.login\n\t\t */\n\n\t\thandleCancelPress: function() {\n\t\t\tvar oLoginPanel = this.getView().byId(\"idLoginPanel\");\n\t\t\tvar oRegisterPanel = this.getView().byId(\"idRegisterPanel\");\n\t\t\toLoginPanel.setVisible(true);\n\t\t\toRegisterPanel.setVisible(false);\n\t\t}\n\n\t\t/**\n\t\t * Called when the Controller is destroyed. Use this one to free resources and finalize activities.\n\t\t * @memberOf TMS.view.login\n\t\t */\n\t\t//\tonExit: function() {\n\t\t//\n\t\t//\t}\n\n\t});\n\n});",
		"TMS/view/login.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"TMS.controller.login\" xmlns:tnt=\"sap.tnt\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:l=\"sap.ui.layout\">\n\t<Page title=\"Title\" showHeader=\"false\" class=\"loginpage  \" enableScrolling=\"false\">\n\t\t<content>\n\t\t\t<tnt:ToolHeader>\n\t\t\t\t<ToolbarSpacer width=\"40%\"/>\n\t\t\t\t<Title text=\"{i18n>title}\"></Title>\n\t\t\t</tnt:ToolHeader>\n\t\t\t<VBox fitContainer=\"true\" justifyContent=\"Center\" alignItems=\"Center\" alignContent=\"Center\">\n\t\t\t\t<items>\n\t\t\t\t\t<l:BlockLayout id=\"BlockLayoutTwo\">\n\t\t\t\t\t\t<l:BlockLayoutRow>\n\t\t\t\t\t\t\t<l:BlockLayoutCell class=\"loginPanel\" id=\"idLoginPanel\" title=\"{i18n>login}\" backgroundColorSet=\"ColorSet10\" backgroundColorShade=\"ShadeA\">\n\t\t\t\t\t\t\t\t<VBox class=\"loginpanel\" width=\"350px\">\n\t\t\t\t\t\t\t\t\t<Input id=\"idUserNameFeild\" placeholder=\"{i18n>username}\"></Input>\n\t\t\t\t\t\t\t\t\t<Input id=\"idPasswordFeild\" type=\"Password\" placeholder=\"{i18n>password}\"></Input>\n\t\t\t\t\t\t\t\t\t<HBox justifyContent=\"Center\" alignItems=\"Center\" alignContent=\"Center\">\n\t\t\t\t\t\t\t\t\t\t<Button press=\"handleLoginPress\" class=\"sapUiSmallMarginEnd\" text=\"{i18n>submit}\" type=\"Emphasized\"/>\n\t\t\t\t\t\t\t\t\t\t<Button press=\"handleShowRegister\" text=\"Register\" type=\"Emphasized\"/>\n\t\t\t\t\t\t\t\t\t</HBox>\n\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t</l:BlockLayoutCell>\n\t\t\t\t\t\t\t<l:BlockLayoutCell id=\"idRegisterPanel\" title=\"Register\" visible=\"hidden\" backgroundColorSet=\"ColorSet10\" backgroundColorShade=\"ShadeB\">\n\t\t\t\t\t\t\t\t<VBox class=\"registerpanel\" width=\"350px\">\n\t\t\t\t\t\t\t\t\t<Input placeholder=\"{i18n>firstname}\" value=\"{appstate>/newuser/firstname}\" valueLiveUpdate=\"true\"></Input>\n\t\t\t\t\t\t\t\t\t<Input placeholder=\"{i18n>lastname}\" value=\"{appstate>/newuser/lastname}\" valueLiveUpdate=\"true\"></Input>\n\t\t\t\t\t\t\t\t\t<Input type=\"Email\" placeholder=\"{i18n>email}\" value=\"{appstate>/newuser/email}\" valueLiveUpdate=\"true\"></Input>\n\t\t\t\t\t\t\t\t\t<Input placeholder=\"{i18n>username}\" value=\"{appstate>/newuser/username}\" valueLiveUpdate=\"true\"></Input>\n\t\t\t\t\t\t\t\t\t<Input type=\"Password\" placeholder=\"password\" value=\"{appstate>/newuser/password}\" valueLiveUpdate=\"true\"></Input>\n\t\t\t\t\t\t\t\t\t<HBox justifyContent=\"Center\" alignItems=\"Center\" alignContent=\"Center\">\n\t\t\t\t\t\t\t\t\t\t<Button press=\"handleRegisterUser\" class=\"sapUiSmallMarginEnd\" text=\"{i18n>submit}\" type=\"Emphasized\"/>\n\t\t\t\t\t\t\t\t\t\t<Button press=\"handleCancelPress\" text=\"{i18n>cancel}\" type=\"Emphasized\"/>\n\t\t\t\t\t\t\t\t\t</HBox>\n\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t</l:BlockLayoutCell>\n\t\t\t\t\t\t</l:BlockLayoutRow>\n\t\t\t\t\t</l:BlockLayout>\n\t\t\t\t</items>\n\t\t\t</VBox>\n\t\t</content>\n\t</Page>\n</mvc:View>",
		"TMS/view/App.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"TMS.controller.App\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\">\n\t<App  id=\"app\">\n\t\t<pages>\n\t\t\t<Page title=\"Title\" showHeader=\"false\">\n\t\t\t\t<content></content>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>"
	}
});